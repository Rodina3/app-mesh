---
Parameters:
  EnvironmentName:
    Type: String
    Description: Environment name that joins all the stacks

  AppMeshMeshName:
    Type: String
    Description: Name of mesh

  ECSServicesDomain:
    Type: String
    Description: DNS namespace used by services e.g. default.svc.cluster.local

  ColorGatewayTaskDefinition:
    Type: String
    Description: Task definition for ColorTeller Gateway Service

  ColorTellerBlueTaskDefinition:
    Type: String
    Description: Task definition for ColorTeller Blue Service

  ColorTellerWhiteTaskDefinition:
    Type: String
    Description: Task definition for ColorTeller White Service

  LoadBalancerPath:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
      should be connected to. Use * to send all load balancer
      traffic to this service.

Resources:
  ### colorteller.demo.local
  ColorTellerWhiteServiceDiscoveryRecord:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Name: "colorteller"
      DnsConfig:
        NamespaceId:
          'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceDiscoveryNamespace"
        DnsRecords:
          - Type: A
            TTL: 300
      HealthCheckCustomConfig:
        FailureThreshold: 1

  ColorTellerWhiteService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster:
        'Fn::ImportValue': !Sub "${EnvironmentName}:ECSCluster"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: FARGATE
      ServiceRegistries:
        - RegistryArn:
            'Fn::GetAtt': ColorTellerWhiteServiceDiscoveryRecord.Arn
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceSecurityGroup"
          Subnets:
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:PrivateSubnet1"
      TaskDefinition: { Ref: ColorTellerWhiteTaskDefinition }

  ### colorteller-blue.demo.local
  ColorTellerBlueServiceDiscoveryRecord:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Name: "colorteller-blue"
      DnsConfig:
        NamespaceId:
          'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceDiscoveryNamespace"
        DnsRecords:
          - Type: A
            TTL: 300
      HealthCheckCustomConfig:
        FailureThreshold: 1

  ColorTellerBlueService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster:
        'Fn::ImportValue': !Sub "${EnvironmentName}:ECSCluster"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: FARGATE
      ServiceRegistries:
        - RegistryArn:
            'Fn::GetAtt': ColorTellerBlueServiceDiscoveryRecord.Arn
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceSecurityGroup"
          Subnets:
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:PrivateSubnet1"
      TaskDefinition: { Ref: ColorTellerBlueTaskDefinition }

  ### gateway.demo.local
  ColorGatewayServiceDiscoveryRecord:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Name: "gateway"
      DnsConfig:
        NamespaceId:
          'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceDiscoveryNamespace"
        DnsRecords:
          - Type: A
            TTL: 300
      HealthCheckCustomConfig:
        FailureThreshold: 1

  ColorGatewayService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster:
        'Fn::ImportValue': !Sub "${EnvironmentName}:ECSCluster"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: FARGATE
      ServiceRegistries:
        - RegistryArn:
            'Fn::GetAtt': ColorGatewayServiceDiscoveryRecord.Arn
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceSecurityGroup"
          Subnets:
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:PrivateSubnet1"
      TaskDefinition: { Ref: ColorGatewayTaskDefinition }


#  ### ALB
#  PublicLoadBalancerSG:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: Access to the public facing load balancer
#      VpcId:
#        'Fn::ImportValue': !Sub "${EnvironmentName}:VPC"
#      SecurityGroupIngress:
#        - CidrIp: 0.0.0.0/0
#          IpProtocol: -1

#  # public ALB for gateway
#  PublicLoadBalancer:
#    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
#    Properties:
#      Scheme: internet-facing
#      LoadBalancerAttributes:
#        - Key: idle_timeout.timeout_seconds
#          Value: '30'
#      Subnets:
#        - { 'Fn::ImportValue': !Sub "${EnvironmentName}:PublicSubnet1" }
#        - { 'Fn::ImportValue': !Sub "${EnvironmentName}:PublicSubnet2" }
#      SecurityGroups: [!Ref 'PublicLoadBalancerSG']
#
#  WebTargetGroup:
#    Type: AWS::ElasticLoadBalancingV2::TargetGroup
#    Properties:
#      HealthCheckIntervalSeconds: 6
#      HealthCheckPath: /ping
#      HealthCheckProtocol: HTTP
#      HealthCheckTimeoutSeconds: 5
#      HealthyThresholdCount: 2
#      TargetType: ip
#      Name: !Sub "${EnvironmentName}-web"
#      Port: 80
#      Protocol: HTTP
#      UnhealthyThresholdCount: 2
#      TargetGroupAttributes:
#        - Key: deregistration_delay.timeout_seconds
#          Value: 120
#      VpcId:
#        'Fn::ImportValue': !Sub "${EnvironmentName}:VPC"
#
#  PublicLoadBalancerListener:
#    Type: AWS::ElasticLoadBalancingV2::Listener
#    DependsOn:
#      - PublicLoadBalancer
#    Properties:
#      DefaultActions:
#        - TargetGroupArn: !Ref WebTargetGroup
#          Type: 'forward'
#      LoadBalancerArn: !Ref 'PublicLoadBalancer'
#      Port: 80
#      Protocol: HTTP
#
#  WebLoadBalancerRule:
#    Type: AWS::ElasticLoadBalancingV2::ListenerRule
#    Properties:
#      Actions:
#        - TargetGroupArn: !Ref WebTargetGroup
#          Type: 'forward'
#      Conditions:
#        - Field: path-pattern
#          Values: [!Ref 'LoadBalancerPath']
#      ListenerArn: !Ref PublicLoadBalancerListener
#      Priority: 1

#Outputs:
#  ColorAppEndpoint:
#    Description: Public endpoint for Color App service
#    Value: !Join ['', ['http://', !GetAtt 'PublicLoadBalancer.DNSName']]